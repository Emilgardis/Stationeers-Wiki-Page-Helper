[instructions]
[instructions."Utility"]
instructions = [{ op = "alias", example = """
    {{ICCode|
    alias dAutoHydro1 d0
    alias vTemperature r0
    }}
    """ }, { op = "define", example = """
    {{ICCode|
    define ultimateAnswer 42
    move r0 ultimateAnswer # Store 42 in register 0
    }}
    """ }, "hcf", "sleep", "yield"]
[instructions."Mathematical"]
instructions = [
    { op = "abs", example = """
    {{ICCode|
    define negativeNumber -10
    abs r0 negativeNumber # Compute the absolute value of -10 and store it in register 0
    }}
    """ },
    { op = "add", example = """
    {{ICCode|add r0 r0 1 # increment r0 by one}}
    {{ICCode|
    define num1 10
    define num2 20
    add r0 num1 num2 # Add 10 and 20 and store the result in register 0
    }}
    """ },
    { op = "ceil", example = """
    {{ICCode|
    define floatNumber 10.3
    ceil r0 floatNumber # Compute the ceiling of 10.3 and store it in register 0
    }}
    """ },
    "div",
    { op = "exp", desc = "exp(a) or e^a" },
    "floor",
    { op = "log", desc = "base e log(a) or ln(a)" },
    "max",
    "min",
    { op = "mod", example = """
    {{ICCode|
    mod r0 10 20
    # Expected: r0 = 10

    mod r1 22 20
    # Expected: r1 = 2

    mod r2 22 -20
    # Expected: r2 = 18

    mod r2 22 -10
    # Expected: r2 = 18
    }}
    """ },
    { op = "move", example = """
    {{ICCode|move r0 42 # Store 42 in register 0}}
    """ },
    "mul",
    "rand",
    "round",
    "sqrt",
    "sub",
    "trunc",
]
[instructions."Mathematical"."Trigonometric"]
instructions = [
    { op = "acos", desc = "Returns the angle (radians) whos cos is the specified value" },
    "asin",
    "atan",
    "atan2",
    "cos",
    "sin",
    "tan",
]
[instructions."Stack"]
instructions = [
    "clr",
    "clrd",
    "get",
    "getd",
    "peek",
    "poke",
    "pop",
    "push",
    "put",
    "putd",
]
[instructions."Slot/Logic"]
instructions = [
    { op = "l", example = """
    Read from the device on d0 into register 0
    {{ICCode|l r0 d0 Setting}}
    Read the pressure from a sensor
    {{ICCode|l r1 d5 Pressure}}
    This also works with aliases. For example:
    {{ICCode|
    alias Sensor d0
    l r0 Sensor Temperature
    }}
    """ },
    "ld",
    "lr",
    { op = "ls", example = """
    Read from the second slot of device on d0, stores 1 in r0 if it's occupied, 0 otherwise.
    {{ICCode|ls r0 d0 2 Occupied}}
    And here is the code to read the charge of an AIMeE:
    {{ICCode|
    alias robot d0
    alias charge r10
    ls charge robot 0 Charge
    }}
    """ },
    { op = "s", example = """
    {{ICCode|
    s d0 Setting r0
    }}
    """ },
    "sd",
    "ss",
    "rmap",
]
[instructions."Slot/Logic"."Batched"]
instructions = [{ op = "lb", example = """
    {{ICCode|lb r0 HASH("StructureWallLight") On Sum}}
    """ }, "lbn", "lbns", "lbs", { op = "sb", example = """
    {{ICCode|sb HASH("StructureWallLight") On 1}}
    """ }, "sbn", "sbs"]
[instructions."Bitwise"]
instructions = [
    "and",
    "nor",
    { op = "not", note = "This is a bitwise operation, the NOT of 1 => -2, etc. You may want to use seqz instead" },
    "or",
    "sla",
    "sll",
    "sra",
    "srl",
    "xor",
]
[instructions."Comparison"]
instructions = [
    { op = "select", note = "This operation can be used as a simple ternary condition", example = """
    {{ICCode|
    select r1 r0 10 100
    }}
    """ },
]
[instructions."Comparison"."Device Pin"]
instructions = ["sdns", "sdse"]
[instructions."Comparison"."Value"]
instructions = [
    "sap",
    { op = "sapz", desc = "Register = 1 if abs(a) <= max(b * abs(a), float.epsilon * 8), otherwise 0" },
    "seq",
    "seqz",
    "sge",
    "sgez",
    "sgt",
    "sgtz",
    "sle",
    "slez",
    "slt",
    "sltz",
    "sna",
    "snan",
    "snanz",
    { op = "snaz", desc = "Register = 1 if abs(a) > max(b * abs(a), float.epsilon), otherwise 0" },
    "sne",
    "snez",
]
[instructions."Branching"]
instructions = [{ op = "j", example = """
    {{ICCode|j 0 # jump line 0}}
    {{ICCode|
    j label # jump to a label

    label:
    # your code here
    }}
    """ }, { op = "jal", example = """
    jal provides a way to do function calls in IC10 mips

    {{ICCode|
    move r0 1000
    move r1 0
    start:
    jal average
    s db Setting r0
    yield
    j start

    average:
    add r0 r0 r1
    div r0 r0 2
    j ra # jump back
    }}
    """ }, "jr"]
[instructions."Branching"."Device Pin"]
instructions = [
    { op = "bdns", syntax = "bdns d? a(r?{{!}}num)" },
    { op = "bdnsal", syntax = "bdnsal d? a(r?{{!}}num)" },
    { op = "bdse", syntax = "bdse d? a(r?{{!}}num)" },
    { op = "bdseal", syntax = "bdseal d? a(r?{{!}}num)", example = """
    {{ICCode|
    #Store line number and jump to line 32 if d0 is assigned.
    bdseal d0 32
    }}
    {{ICCode|
    #Store line in ra and jump to label HarvestCrop if device d0 is assigned.
    bdseal d0 HarvestCrop
    }}
    """ },
    { op = "brdns", syntax = "brdns d? a(r?{{!}}num)" },
    { op = "brdse", syntax = "brdse d? a(r?{{!}}num)" },
]
[instructions."Branching"."Comparison"]
instructions = [
    "bap",
    "brap",
    "bapal",
    { op = "bapz", desc = "Branch to line c if abs(a) <= max(b * abs(a), float.epsilon * 8)" },
    { op = "brapz", desc = "Relative branch to line c if abs(a) <= max(b * abs(a), float.epsilon * 8)" },
    { op = "bapzal", desc = "Branch to line c if abs(a) <= max(b * abs(a), float.epsilon * 8) and store next line number in ra" },
    "beq",
    "breq",
    "beqal",
    "beqz",
    "breqz",
    "beqzal",
    "bge",
    "brge",
    "bgeal",
    "bgez",
    "brgez",
    "bgezal",
    { op = "bgt", example = """
    An example of a '''Schmitt''' trigger, turning on a device if the temperature is too low, and turning it off if it's too high and finally
    doing nothing if the temperature is within the desired range.
    {{ICCode|
    alias sensor d0
    alias device d1

    define mintemp 293.15
    define maxtemp 298.15

    start:
    yield
    l r0 sensor Temperature
    # If the temperature < mintemp, turn on the device
    blt r0 mintemp turnOn
    # If the temperature > maxtemp, turn off the device
    bgt r0 maxtemp turnOff
    j start

    turnOn:
    s device On 1
    j start
    turnOff:
    s device On 0
    j start
    }}
    """ },
    "brgt",
    "bgtal",
    "bgtz",
    "brgtz",
    "bgtzal",
    "ble",
    "brle",
    "bleal",
    "blez",
    "brlez",
    "blezal",
    { op = "blt", example = """
    An example of a '''Schmitt''' trigger, turning on a device if the temperature is too low, and turning it off if it's too high and finally
    doing nothing if the temperature is within the desired range.
    {{ICCode|
    alias sensor d0
    alias device d1

    define mintemp 293.15
    define maxtemp 298.15

    start:
    yield
    l r0 sensor Temperature
    # If the temperature < mintemp, turn on the device
    blt r0 mintemp turnOn
    # If the temperature > maxtemp, turn off the device
    bgt r0 maxtemp turnOff
    j start

    turnOn:
    s device On 1
    j start
    turnOff:
    s device On 0
    j start
    }}
    """ },
    "brlt",
    "bltal",
    "bltz",
    "brltz",
    "bltzal",
    "bna",
    "brna",
    "bnaal",
    "bnan",
    "brnan",
    { op = "bnaz", desc = "Branch to line c if abs(a) > max (b * abs(a), float.epsilon * 8)" },
    { op = "brnaz", desc = "Relative branch to line c if abs(a) > max(b * abs(a), float.epsilon * 8)" },
    { op = "bnazal", desc = "Branch to line c if abs(a) > max (b * abs(a), float.epsilon * 8) and store next line number in ra" },
    "bne",
    "brne",
    "bneal",
    "bnez",
    "brnez",
    "bnezal",
]
[instructions."Deprecated"]
instructions = ["label"]
[logic]
[logic.types]
"Combustion".type = "Boolean"
"CombustionInput".type = "Boolean"
"CombustionInput2".type = "Boolean"
"CombustionOutput".type = "Boolean"
"CombustionOutput2".type = "Boolean"
"OperationalTemperatureEfficiency".type = "Float"
"TemperatureDifferentialEfficiency".type = "Float"
"TemperatureInput".type = "Float"
"TemperatureInput2".type = "Float"
"TemperatureOutput".type = "Float"
"TemperatureOutput2".type = "Float"
"TotalMoles".type = "Float"
"TotalMolesInput".type = "Float"
"TotalMolesOutput".type = "Float"
"AirRelease".type = "Boolean"
"Power".type = "Boolean"
"Power".values = ["Unpowered", "Powered"]
"Lock".type = "Boolean"
"Lock".description = "Disable manual operation of the {device}."
"Lock".values = ["Unlocked", "Locked"]
"Error".type = "Boolean"
"Error".values = ["<p></p>", "Error"]
"On".description = "The current state of the {device}."
"On".values = ["Off", "On"]
"On".type = "Boolean"
"SettingOutput".description = "The output setting for the {device}"
"SettingInput".description = "The input setting for the {device}"
"ClearMemory".type = "Integer"
"ClearMemory".description = "When set to 1, clears the counter memory (e.g. ExportCount). Will set itself back to 0 when actioned"
"Setting".description = "A variable setting that can be read or written."
"Maximum".type = "Float"
"Mode".description = "The mode of the {device}."
"RatioHydrogen".description = "DEPRECATED"
"RatioLiquidHydrogen".description = "DEPRECATED"
"Open".values = ["Closed", "Open"]
[logic.device."StructureActiveVent"]
"PressureExternal".description = """
"Outward" mode: Maximum pressure of the surrounding atmosphere. The default value is 101.325 (kPa)
"Inward" mode": Minimum pressure of the surrounding atmosphere. The default value is 0 (kPa)
"""
"PressureInternal".description = """
"Outward" mode: Minimum pipe network pressure. The default value is 0 (kPa).
"Inward" mode: Maximum pipe network pressure. The default value is 50662.5 (kPa).
"""
[logic.device."StructureAirConditioner"]
"Open" = { description = "Returns whether the Air Conditioner's IC Slot cover is open or closed.", values = { "0" = "Closed", "1" = "Open" } }
"Maximum" = { description = "Maximum temperature in kelvin (K)" }
"Setting" = { description = "Target temperature setpoint in kelvin (K).", type = "Float" }
replace = [
    { regex = "device's [iI]nput [nN]etwork", replace = "{device}'s input" },
    { regex = "device's [iI]nput [aA]tmosphere", replace = "{device}'s input" },
    { regex = "device's [oO]utput [nN]etwork", replace = "{device}'s output" },
    { regex = "device's [oO]utput [aA]tmosphere", replace = "{device}'s output" },
    { regex = "device's [oO]utput2 [nN]etwork", replace = "{device}'s waste output" },
    { regex = "device's [oO]utput2 [aA]tmosphere", replace = "{device}'s waste output" },
]
[logic.device."StructureSorter"]
"Mode" = { description = "The mode of the {device}, '''Split''' does alternate outputs, '''Filter''' decides output via [[Motherboard (Sorter)]], '''Logic''' determines output via parameter '''Output'''" }
"Output" = { values = { "-1" = "Unset", "0" = "Straight (Near Power Switch)", "1" = "Side" }, description = """Decides which side the next item will be sent to.
In '''Logic''' mode, defaults to -1 after action. In '''Split''' mode, alternates between 0 and 1 after action. Does nothing in '''Filter''' mode.
When set to 0 the item will exit the output slot closest to the power switch.  When set to 1, the item will exit the slot furthest from the power switch.""" }
[logic.device."StructureAdvancedFurnace"]
# From `UpdateEachFrame` on `FurnaceBase.cs`
"Mode" = { values = [
    "Invalid",
    "Valid",
], description = "The {device}'s smelting result." }
"Activate" = { description = "Activates the Advanced Furnace when set to 1. Deactivates when set to 0." }
"Maximum".type = "Float"
[logic.device."Robot"]
Mode.values = [
    "RobotMode.None",
    "RobotMode.Follow",
    "RobotMode.MoveToTarget",
    "RobotMode.Roam",
    "RobotMode.Unload",
    "RobotMode.PathToTarget",
    "RobotMode.StorageFull",
]
[logic.device."StructureBasketHoop"]
"Setting".description = "The amount of points scored in the basket. Currently always incremented by 2."
"Lock".description = "Unimplemented, does nothing."
"Lock".values = []

[logic.device."StructureVolumePump"]
"Setting".description = "Sets the flow rate in liters"
"Setting".type = "Float"
"Setting".values = "0.0 to 10.0"
"Ratio".description = "Setting / Maximum"
[logic.device."StructureTurboVolumePump"]
"Setting".description = "Sets the flow rate in liters"
"Setting".type = "Float"
"Setting".values = "0.0 to 100.0"
"Ratio".description = "Setting / Maximum"

[[logic.replace]]
regex = "device's device's"
replace = "{device}'s"
p = -1
[[logic.replace]]
regex = "device's \\{device\\}'s"
replace = "{device}'s"
p = 1
[[logic.replace]]
regex = "^The assess atmosphere"
replace = "Assess if the atmosphere"
[[logic.replace]]
regex = "the device"
replace = "the {device}"
p = 100
[[logic.replace]]
regex = "Atmopshere"
replace = "Atmosphere"
prio = -1
[[logic.replace]]
regex = "of pollutant"
replace = "of [[Pollutant]]"
[[logic.replace]]
regex = "of volatiles"
replace = "of [[Volatiles]]"
[[logic.replace]]
regex = "of nitrogen"
replace = "of [[Nitrogen]]"
[[logic.replace]]
regex = "of oxygen"
replace = "of [[Oxygen]]"
[[logic.replace]]
regex = "of carbon dioxide"
replace = "of [[Carbon Dioxide]]"
[[logic.replace]]
regex = "of water"
replace = "of [[Water]]"

[bot]
api_url = "https://stationeers-wiki.com/api.php"
rest_url = "https://stationeers-wiki.com/rest.php"
[stationpedia]
[stationpedia.links]
Xigo = "Xigo (Faction)"
Norsec = "Norsec (Faction)"
Recurso = "Recurso Espaciais (Faction)"
ExMin = "ExMin (Faction)"
LogicUnitPage = ":Category:Circuits"
ImportExportPage = ":Category:Import/Export"
IngotPage = ":Category:Ingot"
CartridgePage = "Cartridge"
GasNitrousOxide = "Nitrous Oxide"
ThingItemHealPill = "Pill (Medical)"
GasLiquidNitrousOxide = "Nitrous Oxide#Liquid"
GasLiquidPollutant = "Pollutant#Liquid"
GasCarbonDioxide = "Carbon Dioxide"
GasLiquidCarbonDioxide = "Carbon Dioxide#Liquid"
GasSteam = "Steam"
GasLiquidVolatiles = "Volatiles#Liquid"
GasLiquidOxygen = "Oxygen#Liquid"
GasLiquidNitrogen = "Nitrogen#Liquid"
GasHydrogen = "Hydrogen"
GasLiquidHydrogen = "Hydrogen#Liquid"
ThingMotherboardProgrammableChip = "Motherboard (IC_Editor)"
OrePage = "Ores"
